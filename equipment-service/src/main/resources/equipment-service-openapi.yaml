openapi: 3.0.3
info:
  title: CloudSDK Equipment API
  description: APIs that provide services for viewing, updating and deleting various data elements of equipment.
  version: 1.0.0
servers:
  - url: https://localhost:9091
    description: Local Dev server
  - url: https://10.0.0.61:9091
    description: Local Dev server - all-in-one
  - url: https://192.168.0.143:9051
    description: Local Dev server - portal, prov, and ssc
    
tags:
- name: Data Model Overview
- name: Equipment Data
  
    
components:
  securitySchemes:
    tip_wlan_ts_auth:
      type: http
      scheme: bearer
      
  responses:
    GenericApiError:
      description: this object is returned in the cases when an API throws an exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonSerializedException'
            
  schemas:
    
#
#Generic data models used for many APIs
#
    GenericResponse:
      properties:
        message:
          type: string
        success:
          type: boolean
          
    JsonSerializedException:
      description: this object is returned in the cases when an API throws an exception
      properties:
        exType:
          type: string
          enum:
            - IllegalStateException
        error:
          description: error message
          type: string
        path:
          description: API path with parameters that produced the exception
          type: string
        timestamp:
          description: time stamp of when the exception was generated
          type: integer
          format: int64
          
#
# Equipment data models
#

    EquipmentType:
      type: string
      enum:
        - AP
        - SWITCH

    Equipment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        equipmentType:
          $ref: '#/components/schemas/EquipmentType'
        inventoryId:
          type: string
        customerId:
          type: integer
          format: int32
        profileId:
          type: integer
          format: int64
        name:
          type: string
        locationId:
          type: integer
          format: int64
        details:
           $ref: '#/components/schemas/EquipmentDetails'
        latitude:
          type: string
        longitude:
          type: string
        serial:
          type: string
        createdTimestamp:
          type: integer
          format: int64
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: integer
          format: int64
      example:
        equipmentType: AP
        customerId: 2
        profileId: 1
        locationId: 2
        inventoryId: example_ap
        serial: example_serial
        name: example AP

#
# Equipment configuration data models
#

    EquipmentDetails:
      description: Place to put extended equipment properties.
      type: object
      oneOf:
        ## TODO: add other equipment types in here
        - $ref: '#/components/schemas/ApElementConfiguration'
      discriminator:
        propertyName: model_type

    ActiveScanSettings:
      type: object
      properties:
        enabled:
          type: boolean
        scanFrequencySeconds:
          type: integer
          format: int32
        scanDurationMillis:
          type: integer
          format: int32

    AntennaType:
      type: string
      enum:
       - OMNI
       - OAP30_DIRECTIONAL

    DeviceMode:
      type: string
      enum:
       - standaloneAP
       - managedAP
       - gatewaywithAP
       - gatewayOnly

    DeploymentType:
      type: string
      enum:
        - DESK
        - CEILING

    NetworkForwardMode:
      type: string
      enum:
        - BRIDGE
        - NAT

    ApElementConfiguration:
      type: object
      properties:
        elementConfigVersion:
          type: string
        equipmentType:
          $ref: '#/components/schemas/EquipmentType'
        deviceMode:
          $ref: '#/components/schemas/DeviceMode'
        gettingIP:
          type: string
          enum:
            - dhcp
            - manual
        staticIP:
          type: string
        staticIpMaskCidr:
          type: integer
        staticIpGw:
          type: string
        gettingDNS:
          type: string
          enum:
            - dhcp
            - manual
        staticDnsIp1:
          type: string
        staticDnsIp2:
          type: string
        peerInfoList:
          type: array
          items:
            $ref: '#/components/schemas/PeerInfo'
        deviceName:
          type: string
        locationData:
          type: string
        locallyConfiguredMgmtVlan:
          type: integer
          format: int32
        locallyConfigured:
          type: boolean
        deploymentType:
          $ref: '#/components/schemas/DeploymentType'
        syntheticClientEnabled:
          type: boolean
        frameReportThrottleEnabled:
          type: boolean
        antennaType:
          $ref: '#/components/schemas/AntennaType'
        costSavingEventsEnabled:
          type: boolean
        forwardMode:
          $ref: '#/components/schemas/NetworkForwardMode'
        radioMap:
           $ref: '#/components/schemas/RadioMap'
        advancedRadioMap:
          $ref: '#/components/schemas/AdvancedRadioMap'

    TunnelIndicator:
      type: string
      enum:
        - no
        - primary
        - secondary
        
    PeerInfo:
      properties:
        peerMAC:
          type: array
          items:
            type: integer
            format: byte
            minItems: 6
            maxItems: 6 
        peerIP:
          type: string
        tunnel:
          $ref: '#/components/schemas/TunnelIndicator'
        vlans:
          type: array
          items:
            type: integer
            format: byte
        radiusSecret:
          type: string

    RadioMap:
      properties:
        is5GHz:
          $ref: '#/components/schemas/ElementRadioConfiguration'
        is5GHzU:
          $ref: '#/components/schemas/ElementRadioConfiguration'
        is5GHzL:
          $ref: '#/components/schemas/ElementRadioConfiguration'
        is2dot4GHz:
          $ref: '#/components/schemas/ElementRadioConfiguration'
          
    ChannelBandwidth:
      description: On 2.4GHz radio only auto or is20MHz values can be used. On 5GHz radio all values can be used. 
      type: string
      enum:
        - auto
        - is20MHz
        - is40MHz
        - is80MHz
        - is160MHz

    RadioType:
      type: string
      enum:
        - is5GHz
        - is2dot4GHz
        - is5GHzU
        - is5GHzL

    BannedChannel:
      type: object
      properties:
        channelNumber:
          type: integer
          format: int32
        bannedOnEpoc:
          type: integer
          format: int64

    AutoOrManualValue:
      type: object
      properties:
        auto:
          type: boolean
        value:
          type: integer
          format: int32

    AutoOrManualString:
      type: object
      properties:
        auto:
          type: boolean
        value:
          type: string
      
    BestAPSteerType:
      type: string
      enum:
        - both
        - loadBalanceOnly
        - linkQualityOnly
        
    ChannelPowerLevel:
      type: object
      properties:
        channelNumber:
          type: integer
          format: int32
        powerLevel:
          type: integer
          format: int32
        dfs:
          type: boolean
        channelWidth:
          description: Value is in MHz, -1 means AUTO
          type: integer
          format: int32
        
    NeighbouringAPListConfiguration:
      type: object
      properties:
        minSignal:
          type: integer
          format: int32
        maxAps:
          type: integer
          format: int32
        

    ElementRadioConfiguration:
      properties:
        radioType:
          $ref: '#/components/schemas/RadioType'
        channelNumber:
          description: The channel that was picked through the cloud's assigment
          type: integer
          format: int32
        manualChannelNumber:
          description: The channel that was manually entered
          type: integer
          format: int32
        backupChannelNumber:
          description: "Backup channel (this is never set by the customer: it's deduced from the primary channel (either manual or auto)"
          type: integer
          format: int32
        autoChannelSelection:
          type: boolean
        channelBandwidth:
          $ref: '#/components/schemas/ChannelBandwidth'
        bannedChannels:
          type: array
          items:
            $ref: '#/components/schemas/BannedChannel'
        rxCellSizeDb:
          $ref: '#/components/schemas/AutoOrManualValue'
        probeResponseThresholdDb:
          $ref: '#/components/schemas/AutoOrManualValue'
        clientDisconnectThresholdDb:
          $ref: '#/components/schemas/AutoOrManualValue'
        eirpTxPower:
          $ref: '#/components/schemas/AutoOrManualValue'
        bestApEnabled:
          type: boolean
        neighbouringListApConfig:
           $ref: '#/components/schemas/NeighbouringAPListConfiguration'
        minAutoCellSize:
          type: integer
          format: int32
        perimeterDetectionEnabled:
          type: boolean
        bestAPSteerType:  
          $ref: '#/components/schemas/BestAPSteerType'
        deauthAttackDetection:
          type: boolean
        allowedChannelsPowerLevels:
          $ref: '#/components/schemas/ChannelPowerLevel'

    AdvancedRadioMap:
      properties:
        is5GHz:
          $ref: '#/components/schemas/RadioConfiguration'
        is5GHzU:
          $ref: '#/components/schemas/RadioConfiguration'
        is5GHzL:
          $ref: '#/components/schemas/RadioConfiguration'
        is2dot4GHz:
          $ref: '#/components/schemas/RadioConfiguration'

    StateSetting:
      type: string
      enum:
        - enabled
        - disabled

    ManagementRate:
      type: string
      enum:
        - auto
        - rate1mbps
        - rate2mbps
        - rate5dot5mbps
        - rate6mbps
        - rate9mbps
        - rate11mbps
        - rate12mbps
        - rate18mbps
        - rate24mbps

    MulticastRate:
      type: string
      enum:
        - auto
        - rate6mbps
        - rate9mbps
        - rate12mbps
        - rate18mbps
        - rate24mbps
        - rate36mbps
        - rate48mbps
        - rate54mbps

    RadioMode:
      type: string
      enum:
        - modeN
        - modeAC
        - modeGN

    MimoMode:
      type: string
      enum:
        - none
        - oneByOne
        - twoByTwo
        - threeByThree
        - fourByFour

    RadioConfiguration:
      properties:
        radioType:
          $ref: '#/components/schemas/RadioType'
        radioAdminState:
          $ref: '#/components/schemas/StateSetting'
        fragmentationThresholdBytes:
          type: integer
          format: int32
        rtsCtsThreshold:
          type: integer
          format: int32
        autoChannelSelection:
          $ref: '#/components/schemas/StateSetting'
        radioMode:
          $ref: '#/components/schemas/RadioMode'
        mimoMode:
          $ref: '#/components/schemas/MimoMode'
        wmmState:
          $ref: '#/components/schemas/StateSetting'
        uapsdState:
          $ref: '#/components/schemas/StateSetting'
        maxNumClients:
          type: integer
          format: int32
        stationIsolation:
          $ref: '#/components/schemas/StateSetting'
        multicastRate:
          $ref: '#/components/schemas/MulticastRate'
        managementRate:
          $ref: '#/components/schemas/ManagementRate'
        activeScanSettings:
          $ref: '#/components/schemas/ActiveScanSettings'
        channelHopSettings:
          $ref: '#/components/schemas/ChannelHopSettings'
        bestApSettings:
          $ref: '#/components/schemas/RadioBestApSettings'
        forceScanDuringVoice:
          $ref: '#/components/schemas/StateSetting'
        legacyBSSRate:
          $ref: '#/components/schemas/StateSetting'
        beaconInterval:
          type: integer
          format: int32
        deauthAttackDetection:
          type: boolean

    ObssHopMode:
      type: string
      enum:
        - NON_WIFI
        - NON_WIFI_AND_OBSS
      default: NON_WIFI

    RadioBestApSettings:
      description: If mlComputed=true, then dropInSnrPercentage and minLoadFactor properties are populated by ML algorithms. If  mlComputed=false, then those values are supposed to be populated by hand (ML-computed ones will be ignored).
      type: object
      properties:
        mlComputed:
          type: boolean
          default: true
        dropInSnrPercentage:
          type: integer
          format: int32
          default: 10
        minLoadFactor:
          type: integer
          format: int32
          default: 10
          
    ChannelHopSettings:
      description: If noise floor (avg over 4 measurements, measurement interval being 1 sec.) is above -75 dB for more than 3 minutes OR
        If Non WiFi utilization is more than 50% for more than 3 minutes channel will be changed.
      type: object
      properties:
        noiseFloorThresholdInDB:
          type: integer
          format: int32
          default: -75
        noiseFloorThresholdTimeInSeconds:
          type: integer
          format: int32
          default: 180
        nonWifiThresholdInPercentage:
          type: integer
          format: int32
          default: 50
        nonWifiThresholdTimeInSeconds:
          type: integer
          format: int32
          default: 180
        obssHopMode:
          $ref: '#/components/schemas/ObssHopMode'

#
# Objects related to pagination
#

    SortOrder:
      type: string
      default: asc
      enum:
      - asc
      - desc
    
    SortColumnsLocation:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - name
        sortOrder:
          $ref: '#/components/schemas/SortOrder'

    SortColumnsEquipment:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - name
          - profileId
          - locationId
          - equipmentType
          - inventoryId
        sortOrder:
          $ref: '#/components/schemas/SortOrder'

      
    PaginationContextEquipment:
      type: object
      required: 
      - maxItemsPerPage
      properties:
        model_type:
          type: string
          enum:
          - PaginationContext
        maxItemsPerPage:
          type: integer
          format: int32
          default: 20
        lastReturnedPageNumber:
          type: integer
          format: int32
        totalItemsReturned:
          type: integer
          format: int32
        isLastPage:
          type: boolean
      example: 
        model_type: PaginationContext
        maxItemsPerPage: 10

    PaginationResponseEquipment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
        context:
          $ref: '#/components/schemas/PaginationContextEquipment'
          
## ---------------------------------------------------------------------------
security:
 - tip_wlan_ts_auth: []
paths:
 
  /api/equipment:
    post:
      tags:
      - Equipment Data
      summary: Creates new equipment
      operationId: createEquipment
      requestBody:
        description: Equipment info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Equipment'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - Equipment Data
      summary: Updates equipment record
      operationId: updateEquipment
      requestBody:
        description: Equipment info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Equipment'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
    delete:
      tags:
      - Equipment Data
      summary: Deletes Equipment record
      operationId: deleteEquipmentById
      parameters:
      - name: equipmentId
        in: query
        description: Equipment ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
    get:
      tags:
      - Equipment Data
      summary: Get equipment using equipmentId
      operationId: getEquipmentById
      parameters:
      - name: equipmentId
        in: query
        description: Equipment ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
    
  /api/equipment/orNull:
     get:
      tags:
      - Equipment Data
      summary: Get equipment using equipmentId else returns null
      operationId: getEquipmentByIdOrNull
      parameters:
      - name: equipmentId
        in: query
        description: Equipment ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
          
  /api/equipment/byInventoryIdOrNull:
     get:
      tags:
      - Equipment Data
      summary: Retrieves Equipment by inventory id
      operationId: getEquipmentByInventoryIdOrNull
      parameters:
      - name: inventoryId
        in: query
        description: Inventory ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
          
  /api/equipment/inSet:
     get:
      tags:
      - Equipment Data
      summary: Retrieves equipment within a specified set
      operationId: getEquipmentBySet
      parameters:
      - name: equipmentIdSet
        in: query
        description: Set of equipment IDs
        required: true
        content:
          text/plain:
            schema:
              type: array
              items:
                type: integer
                format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
        500: 
          $ref: '#/components/responses/GenericApiError'
  
  /api/equipment/forCustomer:
     get:
      tags:
      - Equipment Data
      summary: Get equipment By customerId
      operationId: getEquipmentByCustomerId
      parameters:
      - name: customerId
        in: query
        description: customer id
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        description: sort options
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortColumnsEquipment'
      - name: paginationContext
        in: query
        description: pagination context
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PaginationContextEquipment'
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseEquipment'
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /api/equipment/forCustomerWithFilter:
     get:
      tags:
      - Equipment Data
      summary: Get equipment By customerId with filter
      operationId: getEquipmentByCustomerIdWithFilter
      parameters:
      - name: customerId
        in: query
        description: customer id
        required: true
        schema:
          type: integer
          format: int32
      - name: equipmentType
        in: query
        description: equipment type
        required: true
        schema:
          items:
            $ref: '#/components/schemas/EquipmentType'
      - name: locationIds
        in: query
        description: Set of Location IDs
        required: true
        content:
          text/plain:
            schema:
              type: array
              items:
                type: integer
                format: int64
      - name: sortBy
        in: query
        description: sort options
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortColumnsLocation'
      - name: paginationContext
        in: query
        description: pagination context
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PaginationContextEquipment'
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseEquipment'
        500:
          $ref: '#/components/responses/GenericApiError'

  /api/equipment/defaultDetails:
     get:
      tags:
      - Equipment Data
      summary: Default Details
      operationId: getDefaultDetails
      parameters:
      - name: equipmentType
        in: query
        description: equipment type
        required: true
        schema:
          items:
            $ref: '#/components/schemas/EquipmentType'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ApElementConfiguration'
        500: 
          $ref: '#/components/responses/GenericApiError'
  
  




