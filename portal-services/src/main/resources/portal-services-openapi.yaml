openapi: 3.0.3
info:
  title: CloudSDK Portal API
  description: APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.
  version: 1.0.0
servers:
  - url: https://localhost:9091
    description: Local Dev server
  - url: https://192.168.0.143:9091
    description: Local Dev server - all-in-one
  - url: https://192.168.0.143:9051
    description: Local Dev server - portal, prov, and ssc


tags:
- name: "Data Model Overview"
  description: |
    A Customer has Locations.

    Locations can be arranged in a hierarchy of Country -> Site -> Building -> Floor.

    Equipment (AccessPoints) can be bound to a customer and location.

    Customer can have multiple Network Configurations (settings that can be attached to multiple equipment instances like SSIDs, radius server settings, etc.).

    Each Equipment can be linked to only one Network Configuration.

    Each Equipment also has an Element Configuration (radio settings that are not shared between equipment instances).
- name: "Login"
- name: "Customer"
  description: |
    Customer represents a single customer with many locations. All equipment is bound to the customer.
- name: "Location"
  description: |
    Locations can be arranged in a hierarchy of Country -> Site -> Building -> Floor. Equipment can be associated with a single location at any level in the location hierarchy.
- name: "Equipment"
  description: |
    Equipment (AccessPoints) can be bound to a customer and location.
- name: "Profile"
  description: |
    Profiles for various services can be associated tith equipment and with other profiles.
- name: "Status"
  description: |
    Status for the network and individual equipment.
- name: "Client Status"
- name: "Alarms"
- name: "WLAN Service Metrics"
- name: "System Events"

components:
  securitySchemes:
    tip_wlan_ts_auth:
      type: http
      scheme: bearer

  responses:
    GenericApiError:
      description: this object is returned in the cases when an API throws an exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonSerializedException'

  schemas:
    GenericResponse:
      properties:
        message:
          type: string
        success:
          type: boolean

    JsonSerializedException:
      description: this object is returned in the cases when an API throws an exception
      properties:
        exType:
          type: string
          enum:
            - IllegalStateException
        error:
          description: error message
          type: string
        path:
          description: API path with parameters that produced the exception
          type: string
        timestamp:
          description: time stamp of when the exception was generated
          type: integer
          format: int64

    Customer:
      description: Customer object
      type: "object"
      required:
        - id
        - email
        - name
        - lastModifiedTimestamp
      properties:
        id:
          type: "integer"
          format: "int32"
        email:
          type: "string"
          format: "email"
        name:
          type: "string"
        createdTimestamp:
          type: "integer"
          format: "int64"
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: "integer"
          format: "int64"
          
    Location:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        locationType:
          type: "string"
          enum:
            - COUNTRY
            - SITE
            - BUILDING
            - FLOOR
            - UNSUPPORTED
        customerId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        parentId:
          type: "integer"
          format: "int64"
        details:
          $ref: "#/components/schemas/LocationDetails"
        createdTimestamp:
          type: "integer"
          format: "int64"
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: "integer"
          format: "int64"
          
    LocationDetails:
      type: "object"
      properties:
        model_type:
          type: string
          enum:
            - LocationDetails
        countryCode:
          type: "string"
          enum:
            - usa
            - ca
            - integration
            - UNSUPPORTED
        dailyActivityDetails:
           $ref: "#/components/schemas/LocationActivityDetailsMap"
        maintenanceWindow:
           $ref: "#/components/schemas/DaysOfWeekTimeRangeSchedule"
        rrmEnabled:
          type: "boolean"
    LocationActivityDetailsMap:
      properties:
        SUNDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        MONDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        TUESDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        WEDNESDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        THURSDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        FRIDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
        SATURDAY:
          $ref: "#/components/schemas/LocationActivityDetails"
    LocationActivityDetails:
      properties:
        busyTime:
          type: "string"
        quietTime:
          type: "string"
        timezone:
          type: "string"
        lastBusySnapshot:
          type: "integer"
          format: "int64"

    DaysOfWeekTimeRangeSchedule:
      type: object
      properties:
        timezone:
          type: string
        timeBegin:
          $ref: '#/components/schemas/LocalTimeValue'
        timeEnd:
          $ref: '#/components/schemas/LocalTimeValue'
        daysOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
    
    LocalTimeValue:
      type: object
      properties:
        hour:
          type: integer
        minute:
          type: integer
          
    DayOfWeek:
      type: string
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY


    EquipmentType:
      type: "string"
      enum:
        - AP
        - SWITCH

    Equipment:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        equipmentType:
          $ref: '#/components/schemas/EquipmentType'
        inventoryId:
          type: "string"
        customerId:
          type: "integer"
          format: "int32"
        profileId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        locationId:
          type: "integer"
          format: "int64"
        details:
           $ref: "#/components/schemas/EquipmentDetails"
        latitude:
          type: "string"
        longitude:
          type: "string"
        serial:
          type: "string"
        createdTimestamp:
          type: "integer"
          format: "int64"
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: "integer"
          format: "int64"

    EquipmentDetails:
      description: Place to put extended equipment properties.
      type: "object"
      oneOf:
        ## TODO: add other metric types in here
        - $ref: '#/components/schemas/ApElementConfiguration'
      discriminator:
        propertyName: model_type

    ActiveScanSettings:
      type: "object"
      properties:
        enabled:
          type: "boolean"
        scanFrequencySeconds:
          type: "integer"
          format: "int32"
        scanDurationMillis:
          type: "integer"
          format: "int32"

    AntennaType:
      type: "string"
      enum:
       - OMNI
       - OAP30_DIRECTIONAL

    DeviceMode:
      type: "string"
      enum:
       - standaloneAP
       - managedAP
       - gatewaywithAP
       - gatewayOnly

    DeploymentType:
      type: "string"
      enum:
        - DESK
        - CEILING

    NetworkForwardMode:
      type: "string"
      enum:
        - BRIDGE
        - NAT

    ApElementConfiguration:
      type: "object"
      properties:
        elementConfigVersion:
          type: "string"
        equipmentType:
          $ref: '#/components/schemas/EquipmentType'
        deviceMode:
          $ref: '#/components/schemas/DeviceMode'
        gettingIP:
          type: "string"
          enum:
            - dhcp
            - manual
        staticIP:
          type: "string"
        staticIpMaskCidr:
          type: integer
        staticIpGw:
          type: "string"
        gettingDNS:
          type: "string"
          enum:
            - dhcp
            - manual
        staticDnsIp1:
          type: "string"
        staticDnsIp2:
          type: "string"
        peerInfoList:
          type: "array"
          items:
            $ref: "#/components/schemas/PeerInfo"
        deviceName:
          type: "string"
        locationData:
          type: "string"
        locallyConfiguredMgmtVlan:
          type: "integer"
          format: "int32"
        locallyConfigured:
          type: "boolean"
        deploymentType:
          $ref: '#/components/schemas/DeploymentType'
        syntheticClientEnabled:
          type: "boolean"
        frameReportThrottleEnabled:
          type: "boolean"
        antennaType:
          $ref: '#/components/schemas/AntennaType'
        costSavingEventsEnabled:
          type: "boolean"
        forwardMode:
          $ref: '#/components/schemas/NetworkForwardMode'
        radioMap:
           $ref: "#/components/schemas/RadioMap"
        advancedRadioMap:
          $ref: "#/components/schemas/AdvancedRadioMap"

    TunnelIndicator:
      type: string
      enum:
        - no
        - primary
        - secondary
        
    PeerInfo:
      properties:
        peerMAC:
          type: array
          items:
            type: integer
            format: byte
            minItems: 6
            maxItems: 6 
        peerIP:
          type: "string"
        tunnel:
          $ref: '#/components/schemas/TunnelIndicator'
        vlans:
          type: array
          items:
            type: integer
            format: byte
        radiusSecret:
          type: "string"

    RadioMap:
      properties:
        "0": # corresponds to radioType == is5GHz
          $ref: "#/components/schemas/ElementRadioConfiguration"
        "1": # corresponds to radioType == is2dot4GHz
          $ref: "#/components/schemas/ElementRadioConfiguration"

    ChannelBandwidth:
      description: On 2.4GHz radio only auto or is20MHz values can be used. On 5GHz radio all values can be used. 
      type: "string"
      enum:
        - auto
        - is20MHz
        - is40MHz
        - is80MHz
        - is160MHz

    RadioType:
      type: string
      enum:
        - is5GHz
        - is2dot4GHz
        - is5GHzU
        - is5GHzL

    BannedChannel:
      type: "object"
      properties:
        channelNumber:
          type: "integer"
          format: "int32"
        bannedOnEpoc:
          type: "integer"
          format: "int64"

    AutoOrManualValue:
      type: "object"
      properties:
        auto:
          type: "boolean"
        value:
          type: "integer"
          format: "int32"
      
    BestAPSteerType:
      type: string
      enum:
        - both
        - loadBalanceOnly
        - linkQualityOnly
        
    ChannelPowerLevel:
      type: object
      properties:
        channelNumber:
          type: integer
          format: int32
        powerLevel:
          type: integer
          format: int32
        dfs:
          type: boolean
        channelWidth:
          description: Value is in MHz, -1 means AUTO
          type: integer
          format: int32
        
    NeighbouringAPListConfiguration:
      type: object
      properties:
        minSignal:
          type: "integer"
          format: "int32"
        maxAps:
          type: "integer"
          format: "int32"
        

    ElementRadioConfiguration:
      properties:
        radioType:
          $ref: "#/components/schemas/RadioType"
        channelNumber:
          description: The channel that was picked through the cloud's assigment
          type: "integer"
          format: "int32"
        manualChannelNumber:
          description: The channel that was manually entered
          type: "integer"
          format: "int32"
        backupChannelNumber:
          description: "Backup channel (this is never set by the customer: it's deduced from the primary channel (either manual or auto)"
          type: "integer"
          format: "int32"
        autoChannelSelection:
          type: "boolean"
        channelBandwidth:
          $ref: "#/components/schemas/ChannelBandwidth"
        bannedChannels:
          type: "array"
          items:
            $ref: "#/components/schemas/BannedChannel"
        rxCellSizeDb:
          $ref: "#/components/schemas/AutoOrManualValue"
        probeResponseThresholdDb:
          $ref: "#/components/schemas/AutoOrManualValue"
        clientDisconnectThresholdDb:
          $ref: "#/components/schemas/AutoOrManualValue"
        eirpTxPower:
          $ref: "#/components/schemas/AutoOrManualValue"
        bestApEnabled:
          type: "boolean"
        neighbouringListApConfig:
           $ref: "#/components/schemas/NeighbouringAPListConfiguration"
        minAutoCellSize:
          type: "integer"
          format: "int32"
        perimeterDetectionEnabled:
          type: "boolean"
        bestAPSteerType:  
          $ref: '#/components/schemas/BestAPSteerType'
        deauthAttackDetection:
          type: "boolean"
        allowedChannelsPowerLevels:
          $ref: '#/components/schemas/ChannelPowerLevel'

    AdvancedRadioMap:
      properties:
        is5GHz:
          $ref: "#/components/schemas/RadioConfiguration"
        is2dot4GHz:
          $ref: "#/components/schemas/RadioConfiguration"

    StateSetting:
      type: string
      enum:
        - enabled
        - disabled

    ManagementRate:
      type: "string"
      enum:
        - auto
        - rate1mbps
        - rate2mbps
        - rate5dot5mbps
        - rate6mbps
        - rate9mbps
        - rate11mbps
        - rate12mbps
        - rate18mbps
        - rate24mbps

    MulticastRate:
      type: "string"
      enum:
        - auto
        - rate6mbps
        - rate9mbps
        - rate12mbps
        - rate18mbps
        - rate24mbps
        - rate36mbps
        - rate48mbps
        - rate54mbps

    RadioMode:
      type: "string"
      enum:
        - modeN
        - modeAC
        - modeGN

    MimoMode:
      type: "string"
      enum:
        - none
        - oneByOne
        - twoByTwo
        - threeByThree
        - fourByFour

    RadioConfiguration:
      properties:
        radioType:
          $ref: "#/components/schemas/RadioType"
        radioAdminState:
          $ref: "#/components/schemas/StateSetting"
        fragmentationThresholdBytes:
          type: "integer"
          format: "int32"
        rtsCtsThreshold:
          type: "integer"
          format: "int32"
        autoChannelSelection:
          $ref: "#/components/schemas/StateSetting"
        radioMode:
          $ref: '#/components/schemas/RadioMode'
        mimoMode:
          $ref: '#/components/schemas/MimoMode'
        wmmState:
          $ref: "#/components/schemas/StateSetting"
        uapsdState:
          $ref: "#/components/schemas/StateSetting"
        maxNumClients:
          type: "integer"
          format: "int32"
        stationIsolation:
          $ref: "#/components/schemas/StateSetting"
        multicastRate:
          $ref: '#/components/schemas/MulticastRate'
        managementRate:
          $ref: "#/components/schemas/ManagementRate"
        activeScanSettings:
          $ref: "#/components/schemas/ActiveScanSettings"
        channelHopSettings:
          $ref: "#/components/schemas/ChannelHopSettings"
        bestApSettings:
          $ref: "#/components/schemas/RadioBestApSettings"
        forceScanDuringVoice:
          $ref: "#/components/schemas/StateSetting"
        legacyBSSRate:
          $ref: "#/components/schemas/StateSetting"
        beaconInterval:
          type: "integer"
          format: "int32"
        deauthAttackDetection:
          type: "boolean"

    ObssHopMode:
      type: "string"
      enum:
        - NON_WIFI
        - NON_WIFI_AND_OBSS
      default: NON_WIFI

    RadioBestApSettings:
      description: If mlComputed=true, then dropInSnrPercentage and minLoadFactor properties are populated by ML algorithms. If  mlComputed=false, then those values are supposed to be populated by hand (ML-computed ones will be ignored).
      type: "object"
      properties:
        mlComputed:
          type: "boolean"
          default: true
        dropInSnrPercentage:
          type: "integer"
          format: "int32"
          default: 10
        minLoadFactor:
          type: "integer"
          format: "int32"
          default: 10
          
    ChannelHopSettings:
      description: If noise floor (avg over 4 measurements, measurement interval being 1 sec.) is above -75 dB for more than 3 minutes OR
        If Non WiFi utilization is more than 50% for more than 3 minutes channel will be changed.
      type: "object"
      properties:
        noiseFloorThresholdInDB:
          type: "integer"
          format: "int32"
          default: -75
        noiseFloorThresholdTimeInSeconds:
          type: "integer"
          format: "int32"
          default: 180
        nonWifiThresholdInPercentage:
          type: "integer"
          format: "int32"
          default: 50
        nonWifiThresholdTimeInSeconds:
          type: "integer"
          format: "int32"
          default: 180
        obssHopMode:
          $ref: '#/components/schemas/ObssHopMode'

    
          
    ProfileType:
      type: "string"
      enum:
        - equipment_ap
        - equipment_switch
        - ssid
        - bonjour
        - radius
        - captive_portal

    Profile:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        profileType:
          $ref: '#/components/schemas/ProfileType'
        customerId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        childProfileIds:
          type: array
          items:
            type: integer
            format: int64
        details:
           $ref: "#/components/schemas/ProfileDetails"
        createdTimestamp:
          type: "integer"
          format: "int64"
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: "integer"
          format: "int64"          

    ProfileDetails:
      description: Place to put extended profile properties specific to each type of the profile.
      type: "object"
      properties:
        sampleDetailsStr:
          type: "string"

    WebTokenRequest:
      description: User Id and password.
      type: "object"
      required: 
        - userId
        - password
      properties:
        userId:
          type: "string"
          default: "support@example.com"
        password:
          type: "string"
          default: "support"
          
          
    AclTemplate:
      type: "object"
      properties:
        Read:
          type: boolean
        ReadWrite:
          type: boolean
        ReadWriteCreate:
          type: boolean
        Delete:
          type: boolean
        PortalLogin:
          type: boolean

    WebTokenAclTemplate:
      type: "object"
      properties:
        aclTemplate:
         $ref: "#/components/schemas/AclTemplate"


    WebTokenResult:
      description: Login and Refresh Tokens to be used in subsequent API calls.
      type: "object"
      properties:
        access_token:
          type: "string"
        refresh_token:
          type: "string"
        token_type:
          type: "string"
        expires_in:
          type: "integer"
          format: "int32"
        idle_timeout:
          type: "integer"
          format: "int32"
        aclTemplate:
          $ref: "#/components/schemas/WebTokenAclTemplate"

    SortOrder:
      type: string
      default: asc
      enum:
      - asc
      - desc
    
    SortColumnsLocation:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - name
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
          
    PaginationContextLocation:
      type: object
      required: 
      - maxItemsPerPage
      properties:
        model_type:
          type: string
          enum:
          - PaginationContext
        maxItemsPerPage:
          type: integer
          format: int32
          default: 20
        lastReturnedPageNumber:
          type: integer
          format: int32
        totalItemsReturned:
          type: integer
          format: int32
        isLastPage:
          type: boolean
      
    PaginationResponseLocation:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        context:
          $ref: '#/components/schemas/PaginationContextLocation'          

    SortColumnsEquipment:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - name
          - profileId
          - locationId
          - equipmentType
          - inventoryId
        sortOrder:
          $ref: '#/components/schemas/SortOrder'

      
    PaginationContextEquipment:
      type: object
      required: 
      - maxItemsPerPage
      properties:
        model_type:
          type: string
          enum:
          - PaginationContext
        maxItemsPerPage:
          type: integer
          format: int32
          default: 20
        lastReturnedPageNumber:
          type: integer
          format: int32
        totalItemsReturned:
          type: integer
          format: int32
        isLastPage:
          type: boolean
      
    PaginationResponseEquipment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
        context:
          $ref: '#/components/schemas/PaginationContextEquipment'

    SortColumnsProfile:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - name
        sortOrder:
          $ref: '#/components/schemas/SortOrder'

      
    PaginationContextProfile:
      type: object
      required: 
      - maxItemsPerPage
      properties:
        model_type:
          type: string
          enum:
          - PaginationContext
        maxItemsPerPage:
          type: integer
          format: int32
          default: 20
        lastReturnedPageNumber:
          type: integer
          format: int32
        totalItemsReturned:
          type: integer
          format: int32
        isLastPage:
          type: boolean
      
    PaginationResponseProfile:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
        context:
          $ref: '#/components/schemas/PaginationContextProfile'
          
## ---------------------------------------------------------------------------
security:
 - tip_wlan_ts_auth: []
paths:
  /management/v1/oauth2/token:
    post:
      tags:
      - "Login"
      summary: "Get access token - to be used as Bearer token header for all other API requests."
      operationId: "getAccessToken"
      requestBody:
        description: "User id and password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebTokenRequest"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebTokenResult"
        500:
          $ref: '#/components/responses/GenericApiError'
      
  /portal/customer:
    get:
      tags:
      - "Customer"
      summary: "Get Customer By Id"
      operationId: "getCustomerById"
      parameters:
      - name: "customerId"
        in: "query"
        description: "customer id"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        500:
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - "Customer"
      summary: "Update Customer"
      operationId: "updateCustomer"
      requestBody:
        description: "customer info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/location:
    post:
      tags:
       - "Location"
      summary: "Create new Location"
      operationId: "createLocation"
      requestBody:
        description: "location info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        500:
          $ref: '#/components/responses/GenericApiError'
    get:
      tags:
      - "Location"
      summary: "Get Location By Id"
      operationId: "getLocationById"
      parameters:
      - name: "locationId"
        in: "query"
        description: "location id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        500:
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - "Location"
      summary: "Update Location"
      operationId: "updateLocation"
      requestBody:
        description: "location info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        500:
          $ref: '#/components/responses/GenericApiError'
    delete:
      tags:
      - "Location"
      summary: "Delete Location"
      operationId: "deleteLocation"
      parameters:
      - name: "locationId"
        in: "query"
        description: "location id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/location/inSet:
    get:
      tags:
      - "Location"
      summary: "Get Locations By a set of ids"
      operationId: "getLocationBySetOfIds"
      parameters:
      - name: "locationIdSet"
        in: "query"
        description: "set of location ids"
        required: true
        content:
          text/plain:
            schema:
              type: "array"
              items:
                type: integer
                format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Location"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/location/forCustomer:
    get:
      tags:
      - "Location"
      summary: "Get Locations By customerId"
      operationId: "getLocationsByCustomerId"
      parameters:
      - name: "customerId"
        in: "query"
        description: "customer id"
        required: true
        schema:
          type: integer
          format: int64
      - name: "sortBy"
        in: "query"
        description: "sort options"
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SortColumnsLocation"
#        content:
#          application/json:
#            schema:
#              type: "array"
#              items:
#                $ref: "#/components/schemas/SortColumnsLocation"
#            examples: 
#              nameAsc:
#                summary: An example of a sort by name ascending
#                value:
#                  model_type: ColumnAndSort
#                  columnName: name
#                  sortOrder: asc
      - name: "paginationContext"
        in: "query"
        description: "pagination context"
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/PaginationContextLocation"
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationResponseLocation"
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /portal/equipment:
    post:
      tags:
       - "Equipment"
      summary: "Create new Equipment"
      operationId: "createEquipment"
      requestBody:
        description: "equipment info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Equipment"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Equipment"
        500:
          $ref: '#/components/responses/GenericApiError'
    get:
      tags:
      - "Equipment"
      summary: "Get Equipment By Id"
      operationId: "getEquipmentById"
      parameters:
      - name: "equipmentId"
        in: "query"
        description: "equipment id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Equipment"
        500:
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - "Equipment"
      summary: "Update Equipment"
      operationId: "updateEquipment"
      requestBody:
        description: "equipment info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Equipment"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Equipment"
        500:
          $ref: '#/components/responses/GenericApiError'
    delete:
      tags:
      - "Equipment"
      summary: "Delete Equipment"
      operationId: "deleteEquipment"
      parameters:
      - name: "equipmentId"
        in: "query"
        description: "equipment id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Equipment"
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /portal/equipment/inSet:
    get:
      tags:
      - "Equipment"
      summary: "Get Equipment By a set of ids"
      operationId: "getEquipmentBySetOfIds"
      parameters:
      - name: "equipmentIdSet"
        in: "query"
        description: "set of equipment ids"
        required: true
        content:
          text/plain:
            schema:
              type: "array"
              items:
                type: integer
                format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Equipment"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/equipment/forCustomer:
    get:
      tags:
      - "Equipment"
      summary: "Get Equipment By customerId"
      operationId: "getEquipmentByCustomerId"
      parameters:
      - name: "customerId"
        in: "query"
        description: "customer id"
        required: true
        schema:
          type: integer
          format: int64
      - name: "sortBy"
        in: "query"
        description: "sort options"
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SortColumnsEquipment"
      - name: "paginationContext"
        in: "query"
        description: "pagination context"
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/PaginationContextEquipment"
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationResponseEquipment"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/equipment/forCustomerWithFilter:
    get:
      tags:
      - "Equipment"
      summary: "Get Equipment for customerId, equipment type, and location id"
      operationId: "getEquipmentByCustomerWithFilter"
      parameters:
      - name: "customerId"
        in: "query"
        description: "customer id"
        required: true
        schema:
          type: integer
          format: int64
      - name: "equipmentType"
        in: "query"
        schema:
          $ref: '#/components/schemas/EquipmentType'
      - name: "locationIds"
        in: "query"
        description: "set of location ids"
        content:
          text/plain:
            schema:
              type: "array"
              items:
                type: integer
                format: int64
      - name: "sortBy"
        in: "query"
        description: "sort options"
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SortColumnsEquipment"
      - name: "paginationContext"
        in: "query"
        description: "pagination context"
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/PaginationContextEquipment"
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationResponseEquipment"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/equipment/defaultDetails:
    get:
      tags:
      - "Equipment"
      summary: "Get default values for Equipment details for a specific equipment type"
      operationId: "getDefaultEquipmentDetails"
      parameters:
      - name: "equipmentType"
        in: "query"
        schema:
          $ref: '#/components/schemas/EquipmentType'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentDetails'
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /portal/profile:
    post:
      tags:
       - "Profile"
      summary: "Create new Profile"
      operationId: "createProfile"
      requestBody:
        description: "profile info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'
    get:
      tags:
      - "Profile"
      summary: "Get Profile By Id"
      operationId: "getProfileById"
      parameters:
      - name: "profileId"
        in: "query"
        description: "profile id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - "Profile"
      summary: "Update Profile"
      operationId: "updateProfile"
      requestBody:
        description: "profile info"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'
    delete:
      tags:
      - "Profile"
      summary: "Delete Profile"
      operationId: "deleteProfile"
      parameters:
      - name: "profileId"
        in: "query"
        description: "profile id"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /portal/profile/inSet:
    get:
      tags:
      - "Profile"
      summary: "Get Profiles By a set of ids"
      operationId: "getProfilesBySetOfIds"
      parameters:
      - name: "profileIdSet"
        in: "query"
        description: "set of profile ids"
        required: true
        content:
          text/plain:
            schema:
              type: "array"
              items:
                type: integer
                format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/profile/forCustomer:
    get:
      tags:
      - "Profile"
      summary: "Get Profiles By customerId"
      operationId: "getProfilesByCustomerId"
      parameters:
      - name: "customerId"
        in: "query"
        description: "customer id"
        required: true
        schema:
          type: integer
          format: int64
      - name: "sortBy"
        in: "query"
        description: "sort options"
        schema:
          type: array
          items:
            $ref: "#/components/schemas/SortColumnsProfile"
      - name: "paginationContext"
        in: "query"
        description: "pagination context"
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/PaginationContextProfile"
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationResponseProfile"
        500:
          $ref: '#/components/responses/GenericApiError'

  /portal/profile/withChildren:
    get:
      tags:
      - "Profile"
      summary: "Get Profile and all its associated children"
      operationId: "getProfileWithChildren"
      parameters:
      - name: "profileId"
        in: "query"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Profile"
        500:
          $ref: '#/components/responses/GenericApiError'
